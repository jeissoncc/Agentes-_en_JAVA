package ontology;
 
import jade.content.onto.*;
import jade.content.schema.*;
 
import Ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyOntology<br>
 * @version generated on Mon Nov 13 13:46:37 COT 2017 by jcast
 */
public class MyOntology implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyOntology(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyOntology(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Cultural
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Cultural", Cultural.class, DefaultCultural.class);
    }

    /**
     * Creates an instance of type Cultural.  Modifies the underlying ontology.
     */
    public Cultural createCultural(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CULTURAL, DefaultCultural.class);
    }

    /**
     * Gets an instance of type Cultural with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cultural getCultural(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CULTURAL, DefaultCultural.class);
    }

    /**
     * Gets all instances of Cultural from the ontology.
     */
    public Collection<? extends Cultural> getAllCulturalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CULTURAL, DefaultCultural.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Emocional
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Emocional", Emocional.class, DefaultEmocional.class);
    }

    /**
     * Creates an instance of type Emocional.  Modifies the underlying ontology.
     */
    public Emocional createEmocional(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EMOCIONAL, DefaultEmocional.class);
    }

    /**
     * Gets an instance of type Emocional with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Emocional getEmocional(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EMOCIONAL, DefaultEmocional.class);
    }

    /**
     * Gets all instances of Emocional from the ontology.
     */
    public Collection<? extends Emocional> getAllEmocionalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EMOCIONAL, DefaultEmocional.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Intelectual
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Intelectual", Intelectual.class, DefaultIntelectual.class);
    }

    /**
     * Creates an instance of type Intelectual.  Modifies the underlying ontology.
     */
    public Intelectual createIntelectual(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTELECTUAL, DefaultIntelectual.class);
    }

    /**
     * Gets an instance of type Intelectual with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Intelectual getIntelectual(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTELECTUAL, DefaultIntelectual.class);
    }

    /**
     * Gets all instances of Intelectual from the ontology.
     */
    public Collection<? extends Intelectual> getAllIntelectualInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTELECTUAL, DefaultIntelectual.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Jeisson_Castiblanco
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Jeisson_Castiblanco", Jeisson_Castiblanco.class, DefaultJeisson_Castiblanco.class);
    }

    /**
     * Creates an instance of type Jeisson_Castiblanco.  Modifies the underlying ontology.
     */
    public Jeisson_Castiblanco createJeisson_Castiblanco(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_JEISSON_CASTIBLANCO, DefaultJeisson_Castiblanco.class);
    }

    /**
     * Gets an instance of type Jeisson_Castiblanco with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Jeisson_Castiblanco getJeisson_Castiblanco(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_JEISSON_CASTIBLANCO, DefaultJeisson_Castiblanco.class);
    }

    /**
     * Gets all instances of Jeisson_Castiblanco from the ontology.
     */
    public Collection<? extends Jeisson_Castiblanco> getAllJeisson_CastiblancoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_JEISSON_CASTIBLANCO, DefaultJeisson_Castiblanco.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Persona
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#Persona", Persona.class, DefaultPersona.class);
    }

    /**
     * Creates an instance of type Persona.  Modifies the underlying ontology.
     */
    public Persona createPersona(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSONA, DefaultPersona.class);
    }

    /**
     * Gets an instance of type Persona with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Persona getPersona(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSONA, DefaultPersona.class);
    }

    /**
     * Gets all instances of Persona from the ontology.
     */
    public Collection<? extends Persona> getAllPersonaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSONA, DefaultPersona.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#fisica
     */

    {
        javaMapping.add("http://www.semanticweb.org/jcast/ontologies/2017/10/untitled-ontology-4#fisica", Fisica.class, DefaultFisica.class);
    }

    /**
     * Creates an instance of type Fisica.  Modifies the underlying ontology.
     */
    public Fisica createFisica(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FISICA, DefaultFisica.class);
    }

    /**
     * Gets an instance of type Fisica with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fisica getFisica(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FISICA, DefaultFisica.class);
    }

    /**
     * Gets all instances of Fisica from the ontology.
     */
    public Collection<? extends Fisica> getAllFisicaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FISICA, DefaultFisica.class);
    }


}

 